{"ast":null,"code":"var _jsxFileName = \"/mnt/d/react/streams/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    this.props.fetchStream(id);\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    const _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, title), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/mnt/d/react/streams/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","player","createPlayer","type","url","attachMediaElement","current","render","stream","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACA;;AAEDC,EAAAA,iBAAiB,GAAG;AAAA,UACXC,EADW,GACJ,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MADb,CACXF,EADW;AAGnB,SAAKJ,KAAL,CAAWJ,WAAX,CAAuBQ,EAAvB;AACA,SAAKG,MAAL,GAAcb,GAAG,CAACc,YAAJ,CAAiB;AAC9BC,MAAAA,IAAI,EAAE,KADwB;AAE9BC,MAAAA,GAAG,uCAAgCN,EAAhC;AAF2B,KAAjB,CAAd;AAIA,SAAKG,MAAL,CAAYI,kBAAZ,CAA+B,KAAKV,QAAL,CAAcW,OAA7C;AACA;;AAEDC,EAAAA,MAAM,GAAG;AACR,QAAG,CAAC,KAAKb,KAAL,CAAWc,MAAf,EAAsB;AACrB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACA;;AAHO,+BAKuB,KAAKd,KAAL,CAAWc,MALlC;AAAA,UAKAC,KALA,sBAKAA,KALA;AAAA,UAKOC,WALP,sBAKOA,WALP;AAOR,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,GAAG,EAAE,KAAKf,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAAEgB,QAAAA,KAAK,EAAE;AAAT,OAAlC;AAAqD,MAAA,QAAQ,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHF,CADD;AAOA;;AA/BuC;;AAkCzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC5C,SAAO;AAAEN,IAAAA,MAAM,EAAEK,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACf,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAP;AACA,CAFD;;AAIA,eAAeT,OAAO,CAACuB,eAAD,EAAkB;AAAEtB,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React from 'react';\r\nimport flv from 'flv.js';\r\nimport { connect } from 'react-redux';\r\nimport { fetchStream } from '../../actions';\r\n\r\nclass StreamShow extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.videoRef = React.createRef();\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { id } = this.props.match.params;\r\n\r\n\t\tthis.props.fetchStream(id);\r\n\t\tthis.player = flv.createPlayer({\r\n\t\t\ttype: 'flv',\r\n\t\t\turl: `http://localhost:8000/live/${id}.flv`\r\n\t\t});\r\n\t\tthis.player.attachMediaElement(this.videoRef.current);\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(!this.props.stream){\r\n\t\t\treturn <div>Loading...</div>;\r\n\t\t}\r\n\r\n\t\tconst { title, description } = this.props.stream;\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t  <video ref={this.videoRef} style={{ width: '100%' }} controls />\r\n\t\t\t  <h1>{title}</h1>\r\n\t\t\t  <h5>{description}</h5>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n\treturn { stream: state.streams[ownProps.match.params.id] };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);"]},"metadata":{},"sourceType":"module"}