{"ast":null,"code":"import _objectSpread from \"/mnt/d/react/streams/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport streams from '../apis/streams';\nimport history from '../history';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from './types';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => async (dispatch, getState) => {\n  const userId = getState().auth.userId;\n  const response = await streams.post('/streams', _objectSpread({}, formValues, {\n    userId\n  }));\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  }); // Do some programmatic navigation to get the user back to the root route\n\n  history.push('/');\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get('/streams');\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(\"/streams/\".concat(id));\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(\"/streams/\".concat(id), formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push('/');\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(\"/streams/\".concat(id));\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n  history.push('/');\n};","map":{"version":3,"sources":["/mnt/d/react/streams/client/src/actions/index.js"],"names":["streams","history","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","push","fetchStreams","get","fetchStream","id","editStream","patch","deleteStream","delete"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SACCC,OADD,EAECC,QAFD,EAGCC,aAHD,EAICC,aAJD,EAKCC,YALD,EAMCC,aAND,EAOCC,WAPD,QAQO,SARP;AAUA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AACjC,SAAO;AACNC,IAAAA,IAAI,EAAET,OADA;AAENU,IAAAA,OAAO,EAAEF;AAFH,GAAP;AAIA,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC5B,SAAO;AACNF,IAAAA,IAAI,EAAER;AADA,GAAP;AAGA,CAJM;AAMP,OAAO,MAAMW,YAAY,GAAIC,UAAD,IAAgB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAAA,QACjEP,MADiE,GACtDO,QAAQ,GAAGC,IAD2C,CACjER,MADiE;AAEzE,QAAMS,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,IAAR,CAAa,UAAb,oBAA8BL,UAA9B;AAA0CL,IAAAA;AAA1C,KAAvB;AAEAM,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR,CAJyE,CAKzE;;AACApB,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACA,CAPM;AASP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMP,QAAN,IAAkB;AACnD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,CAAY,UAAZ,CAAvB;AAEAR,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACA,CAJM;AAMP,OAAO,MAAMI,WAAW,GAAIC,EAAD,IAAQ,MAAMV,QAAN,IAAkB;AACpD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,oBAAwBE,EAAxB,EAAvB;AAEAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,YAAR;AAAsBM,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACA,CAJM;AAMP,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAKX,UAAL,KAAoB,MAAMC,QAAN,IAAkB;AAC/D,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAAC4B,KAAR,oBAA0BF,EAA1B,GAAgCX,UAAhC,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEH,WAAR;AAAqBI,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACApB,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACA,CALM;AAOP,OAAO,MAAMO,YAAY,GAAIH,EAAD,IAAQ,MAAMV,QAAN,IAAkB;AACrD,QAAMhB,OAAO,CAAC8B,MAAR,oBAA2BJ,EAA3B,EAAN;AAEAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEJ,aAAR;AAAuBK,IAAAA,OAAO,EAAEc;AAAhC,GAAD,CAAR;AACAzB,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACA,CALM","sourcesContent":["import streams from '../apis/streams';\r\nimport history from '../history';\r\nimport { \r\n\tSIGN_IN, \r\n\tSIGN_OUT, \r\n\tCREATE_STREAM,\r\n\tFETCH_STREAMS,\r\n\tFETCH_STREAM,\r\n\tDELETE_STREAM,\r\n\tEDIT_STREAM\r\n} from './types';\r\n\r\nexport const signIn = (userId) => {\r\n\treturn {\r\n\t\ttype: SIGN_IN,\r\n\t\tpayload: userId\r\n\t};\r\n};\r\n\r\nexport const signOut = () => {\r\n\treturn {\r\n\t\ttype: SIGN_OUT\r\n\t};\r\n};\r\n\r\nexport const createStream = (formValues) => async (dispatch, getState) => {\r\n\tconst { userId } = getState().auth;\r\n\tconst response = await streams.post('/streams', { ...formValues, userId });\r\n\r\n\tdispatch({ type: CREATE_STREAM, payload: response.data });\r\n\t// Do some programmatic navigation to get the user back to the root route\r\n\thistory.push('/');\r\n};\r\n\r\nexport const fetchStreams = () => async dispatch => {\r\n\tconst response = await streams.get('/streams');\r\n\r\n\tdispatch({ type: FETCH_STREAMS, payload: response.data });\r\n};\r\n\r\nexport const fetchStream = (id) => async dispatch => {\r\n\tconst response = await streams.get(`/streams/${id}`);\r\n\r\n\tdispatch({ type: FETCH_STREAM, payload: response.data });\r\n};\r\n\r\nexport const editStream = (id, formValues) => async dispatch => {\r\n\tconst response = await streams.patch(`/streams/${id}`, formValues);\r\n\r\n\tdispatch({ type: EDIT_STREAM, payload: response.data });\r\n\thistory.push('/');\r\n};\r\n\r\nexport const deleteStream = (id) => async dispatch => {\r\n\tawait streams.delete(`/streams/${id}`);\r\n\r\n\tdispatch({ type: DELETE_STREAM, payload: id });\r\n\thistory.push('/');\r\n};"]},"metadata":{},"sourceType":"module"}